{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  data() {\n    return {\n      openedModal: false,\n      name: \"\",\n      // index: null,\n      newCategory: {\n        categorieId: \"\"\n      },\n      editingCategory: \"\"\n    };\n  },\n  computed: {\n    categoriesV() {\n      return this.$store.state.categoriesV;\n    }\n  },\n  methods: {\n    remove(index) {\n      if (confirm(\"Etes-vous certain de vouloir supprimer cette catégorie?\")) {\n        this.categoriesV.splice(index, 1);\n        this.saveToLocalStorage();\n      }\n    },\n    update() {\n      if (this.name !== \"\") {\n        this.categoriesV[this.index].name = this.name;\n        this.saveToLocalStorage();\n        this.closeModal();\n      }\n    },\n    addCategory() {\n      if (this.name.trim() !== \"\") {\n        let newId = this.categoriesV[this.categoriesV.length - 1].id + 1;\n        this.categoriesV.push({\n          id: newId,\n          name: this.name\n        });\n        this.saveToLocalStorage();\n        this.closeModal();\n      }\n    },\n    saveToLocalStorage() {\n      localStorage.setItem(\"categoriesV\", JSON.stringify(this.categoriesV));\n    },\n    openModal(index) {\n      this.openedModal = true;\n      this.index = index;\n      this.name = this.categoriesV[index].name;\n    },\n    openModalAdd() {\n      this.openedModal = true;\n      // this.index = -1;\n      this.name = \"\";\n    },\n    closeModal() {\n      this.openedModal = false;\n      this.name = \"\";\n    }\n  },\n  watch: {\n    categoriesV: {\n      deep: true,\n      handler() {\n        this.saveToLocalStorage();\n      }\n    }\n  },\n  created() {\n    let storedCategoriesV = JSON.parse(localStorage.getItem(\"categoriesV\"));\n    if (storedCategoriesV) {\n      this.$store.commit(\"SET_CATEGORIESV\", storedCategoriesV);\n    } else {\n      // If categoriesV is not stored in localStorage, initialize it as a replica of categories\n      this.$store.commit(\"SET_CATEGORIESV\", [...this.$store.state.categories]);\n      // Save to localStorage for future use\n      this.saveToLocalStorage();\n    }\n    this.$store.dispatch(\"initializeCategories\");\n  }\n};","map":{"version":3,"names":["data","openedModal","name","newCategory","categorieId","editingCategory","computed","categoriesV","$store","state","methods","remove","index","confirm","splice","saveToLocalStorage","update","closeModal","addCategory","trim","newId","length","id","push","localStorage","setItem","JSON","stringify","openModal","openModalAdd","watch","deep","handler","created","storedCategoriesV","parse","getItem","commit","categories","dispatch"],"sources":["/workspaces/Projet-WebWares/src/views/ManageCategory.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <div class=\"category\">\r\n      <h1>Catégories</h1>\r\n      <br /><br />\r\n      <table>\r\n        <thead>\r\n          <tr>\r\n            <th>ID</th>\r\n            <th>Nom de la catégorie</th>\r\n            <th>Actions</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          <tr v-for=\"(categorie, index) in categoriesV\" :key=\"index\">\r\n            <td>{{ categorie.id }}</td>\r\n            <td>{{ categorie.name }}</td>\r\n            <td>\r\n              <button\r\n                class=\"action-btns modify\"\r\n                type=\"button\"\r\n                @click=\"openModal(index)\"\r\n              >\r\n                Modifier\r\n              </button>\r\n              <button\r\n                class=\"action-btns remove\"\r\n                type=\"button\"\r\n                @click=\"remove(index)\"\r\n              >\r\n                Supprimer\r\n              </button>\r\n            </td>\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n      <button\r\n        class=\"action-btns add-category\"\r\n        type=\"button\"\r\n        @click=\"openModalAdd((index = 'addCat'))\"\r\n      >\r\n        Ajouter nouvelle catégorie\r\n      </button>\r\n    </div>\r\n    <!-- Modal -->\r\n    <div v-if=\"openedModal\" class=\"modal\" v-cloak>\r\n      <div class=\"modal-content\">\r\n        <span class=\"close\" @click=\"closeModal\">&times;</span>\r\n        <div v-if=\"index === 'addCat'\">\r\n          <h2>Ajouter nouvelle catégorie</h2>\r\n          <br />\r\n          <form v-on:submit.prevent=\"addCategory\">\r\n            <label for=\"name\">Name :</label>\r\n            <input\r\n              type=\"text\"\r\n              id=\"name\"\r\n              name=\"name\"\r\n              v-model=\"name\"\r\n              placeholder=\"2 caractères minimum\"\r\n              required\r\n            />\r\n            <br /><br /><br />\r\n            <input type=\"submit\" value=\"Enregistrer\" />\r\n          </form>\r\n        </div>\r\n        <div v-else>\r\n          <h2>Modifier catégorie : {{ name }}</h2>\r\n          <br />\r\n          <form v-on:submit.prevent=\"update\">\r\n            <label for=\"name\">Name :</label>\r\n            <input\r\n              type=\"text\"\r\n              id=\"name\"\r\n              name=\"name\"\r\n              v-model=\"name\"\r\n              placeholder=\"2 caractères minimum\"\r\n              required\r\n            />\r\n            <br /><br /><br />\r\n            <input type=\"submit\" value=\"Enregistrer\" />\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  data() {\r\n    return {\r\n      openedModal: false,\r\n      name: \"\",\r\n      // index: null,\r\n      newCategory: {\r\n        categorieId: \"\",\r\n      },\r\n      editingCategory: \"\",\r\n    };\r\n  },\r\n\r\n  computed: {\r\n    categoriesV() {\r\n      return this.$store.state.categoriesV;\r\n    },\r\n  },\r\n\r\n  methods: {\r\n    remove(index) {\r\n      if (confirm(\"Etes-vous certain de vouloir supprimer cette catégorie?\")) {\r\n        this.categoriesV.splice(index, 1);\r\n        this.saveToLocalStorage();\r\n      }\r\n    },\r\n\r\n    update() {\r\n      if (this.name !== \"\") {\r\n        this.categoriesV[this.index].name = this.name;\r\n        this.saveToLocalStorage();\r\n        this.closeModal();\r\n      }\r\n    },\r\n\r\n    addCategory() {\r\n      if (this.name.trim() !== \"\") {\r\n        let newId = this.categoriesV[this.categoriesV.length - 1].id + 1;\r\n        this.categoriesV.push({ id: newId, name: this.name });\r\n        this.saveToLocalStorage();\r\n        this.closeModal();\r\n      }\r\n    },\r\n\r\n    saveToLocalStorage() {\r\n      localStorage.setItem(\"categoriesV\", JSON.stringify(this.categoriesV));\r\n    },\r\n\r\n    openModal(index) {\r\n      this.openedModal = true;\r\n      this.index = index;\r\n      this.name = this.categoriesV[index].name;\r\n    },\r\n\r\n    openModalAdd() {\r\n      this.openedModal = true;\r\n      // this.index = -1;\r\n      this.name = \"\";\r\n    },\r\n\r\n    closeModal() {\r\n      this.openedModal = false;\r\n      this.name = \"\";\r\n    },\r\n  },\r\n\r\n  watch: {\r\n    categoriesV: {\r\n      deep: true,\r\n      handler() {\r\n        this.saveToLocalStorage();\r\n      },\r\n    },\r\n  },\r\n\r\n  created() {\r\n    let storedCategoriesV = JSON.parse(localStorage.getItem(\"categoriesV\"));\r\n    if (storedCategoriesV) {\r\n      this.$store.commit(\"SET_CATEGORIESV\", storedCategoriesV);\r\n    } else {\r\n      // If categoriesV is not stored in localStorage, initialize it as a replica of categories\r\n      this.$store.commit(\"SET_CATEGORIESV\", [...this.$store.state.categories]);\r\n      // Save to localStorage for future use\r\n      this.saveToLocalStorage();\r\n    }\r\n\r\n    this.$store.dispatch(\"initializeCategories\");\r\n  },\r\n};\r\n</script>\r\n\r\n\r\n<style scoped>\r\n.category {\r\n  width: 600px;\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  border: 1px solid rgb(231, 67, 39);\r\n  padding: 10px 40px 30px 20px;\r\n}\r\n\r\ntable {\r\n  width: 100%;\r\n  margin: 10px;\r\n  font-size: 14px;\r\n}\r\n\r\ntbody tr:nth-child(even) {\r\n  background-color: #f2f2f2;\r\n}\r\n\r\ntbody tr:nth-child(odd) {\r\n  background-color: #ffffff;\r\n}\r\n\r\ntd,\r\nth {\r\n  padding: 8px;\r\n  border-collapse: collapse;\r\n  border-bottom: 1px solid lightgrey;\r\n}\r\n\r\nlabel {\r\n  float: left;\r\n  font-weight: bold;\r\n}\r\n\r\ninput {\r\n  width: 100%;\r\n  padding: 10px;\r\n  border: none;\r\n  border-bottom: 1px solid rgb(231, 67, 39);\r\n}\r\n\r\nselect {\r\n  float: left;\r\n}\r\n\r\ninput[type=\"submit\"],\r\nbutton {\r\n  width: unset;\r\n  padding: 5px 15px;\r\n  color: #fff;\r\n  cursor: pointer;\r\n  border: none;\r\n  border-radius: 5px;\r\n  border: 1px solid #4caf50;\r\n  color: #4caf50;\r\n}\r\n\r\n.modify {\r\n  border: 1px solid rgb(94, 25, 111);\r\n  color: rgb(94, 25, 111);\r\n}\r\n\r\n.remove {\r\n  border: 1px solid red;\r\n  color: red;\r\n}\r\n\r\n.add-category {\r\n  border: 1px solid #4caf50;\r\n  color: #4caf50;\r\n}\r\n\r\nbutton {\r\n  margin-left: 10px;\r\n}\r\n\r\n.modal {\r\n  display: flex;\r\n  position: fixed;\r\n  top: 50%;\r\n  left: 50%;\r\n  transform: translate(-50%, -50%);\r\n  width: 100%;\r\n  height: 100%;\r\n  background-color: rgba(0, 0, 0, 0.5);\r\n  z-index: 1;\r\n  justify-content: center;\r\n  align-items: center;\r\n}\r\n\r\n.modal-content {\r\n  background-color: white;\r\n  padding: 20px;\r\n  border-radius: 5px;\r\n  box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.2);\r\n  max-width: 600px;\r\n  max-height: 600px;\r\n  width: 100%;\r\n  overflow-y: scroll;\r\n  position: relative;\r\n}\r\n\r\n.close {\r\n  position: absolute;\r\n  top: 10px;\r\n  right: 10px;\r\n  cursor: pointer;\r\n  font-size: 18px;\r\n  color: #333;\r\n  z-index: 2;\r\n}\r\n</style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}